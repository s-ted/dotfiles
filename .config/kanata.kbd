;; Comments are prefixed by double-semicolon. A single semicolon is parsed as the
;; keyboard key. Comments are ignored for the configuration file.
;;
;; This configuration language is Lisp-like. If you're unfamiliar with Lisp,
;; don't be alarmed. The maintainer jtroo is also unfamiliar with Lisp. You
;; don't need to know Lisp in-depth to be able to configure kanata.
;;
;; If you follow along with the examples, you should be fine. Kanata should
;; also hopefully have helpful error messages in case something goes wrong.
;; If you need help, you are welcome to ask.

(defcfg
  ;; If you are using Windows, you do not need the linux-dev line below, but
  ;; you still need a defcfg entry. You can leave the linux-dev entry and it
  ;; will be ignored or you can delete it if desired.
  ;;
  ;; Your keyboard device may differ from this. I believe /dev/input/by-id/
  ;; is preferable; I recall reading that it's less likely to change names on you,
  ;; but I didn't find any keyboard device in there in my VM.
;;  linux-dev /dev/input/by-path/platform-i8042-serio-0-event-kbd
  linux-dev /dev/input/by-id/usb-TypeMatrix.com_USB_Keyboard-event-kbd

;;  linux-dev /dev/input/by-path/pci-0000\:00\:14.0-usb-0\:3.2.3.3\:1.0-event-kbd
;;linux-dev /dev/input/event4;
)

;; Only one defsrc is allowed.
;;
;; defsrc defines the keys that will be intercepted by kanata. The order of the
;; keys matches with deflayer declarations and all deflayer declarations must
;; have the same number of keys as defsrc. Any keys not listed in defsrc will
;; be passed straight to the operating system.
(defsrc
                                 del
  grv   1    2    3    4    5         6    7    8    9    0    -    =
  tab   q    w    e    r    t    bspc y    u    i    o    p    [    ]
  lsft  a    s    d    f    g    ret  h    j    k    l    ;    '    rsft
        z    x    c    v    b         n    m    ,    .    /    \
  lctl  pp                  spc                 
        lmet lalt                               ralt                rctl
)

;; The first layer defined is the layer that will be active by default when
;; kanata starts up. This layer is the standard QWERTY layout except for the
;; backtick/grave key (@grl) which is an alias for a tap-hold key.
;;
;; There are currently a maximum of 25 layers allowed.
;; The dvorak layer remaps the keys to the dvorak layout. In addition there is
;; another tap-hold key: @cap. This key retains caps lock functionality when
;; quickly tapped but is read as left-control when held.

(deflayer dvorak
                                 del
  @grl  1    2    3    4    5         6    7    8    9    0    [    ]
  tab   '   ,    .    p    y    bspc f    g    c    @r   l    /    =
  @lsft @met_a @alt_o    @ctl_e    @sft_u    @i    ret  @d    @sft_h    @ctl_t    @alt_n    @met_s   -    @rsft
        ;    q    j    k    x         b    m    w    v    z    \ 
  lctl  @meh                @spc                 
        lmet @e                                 @ralt               @multra
)

(defalias
  * S-8
  ? S-/
  @ S-2
  + S-=
  # S-3
  | S-\
  ! S-1
  dbq S-'
  : S-;

  _ S--
  < S-,
  lpar S-9
  > S-.
  rpar S-0

  ~ S-`
  ^ S-6
)

(deflayer qwerty
                                 _
  @grl  _    _    _    _    _         _    _    _    _    _    _    _
  _     _    _    _    _    _    _    _    _    _    _    _    _    _
  _     _    _    _    _    _    _    _    _    _    _    _    _    _
        _    _    _    _    _         _    _    _    _    _    _
  _     _                   _                 
        _    _                                  _                   _
)

(deflayer lower
                                 _
  @grl  S-1  S-2  S-3  S-4  S-5       S-6  S-7  S-8  S-9  S-0  S-[  S-]
  _     S-1  S-2  S-3  S-4  S-5  _    S-6  S-7  S-8  S-9  S-0  S-[  S-]
  _     1    2    3    4    5    _    6    7    8    9    0    -    _
        _    _    _    _    _         _    _    _    _    _    _
  _     _                   _                 
        _    _                                  @ultra              _
)

(deflayer higher
                                 _
  @grl  S-1  S-2  S-3  S-4  S-5       S-6  S-7  S-8  S-9  S-0  S-[  S-]
  _     @^   @<   @>   S-4  S-5  _    @@   S-7  S-8  '    grv  _    _
  _     S-{ @lpar @rpar S-} =    _    \    @+   -    /    @dbq _    _
        @~   [    ]    @_   @#        @|   @!   ;    @:   @?   _
  _     _                   _                 
        _    @ultra                             _                   _
)

(deflayer ultra
                                 _
  @grl  _    _    _    _    _         _    _    _    _    _    _    _
  _     _    _    _    _    _    _    _    _    _    _    _    _    _
  _     S-1  S-2  S-3  S-4  S-5  _    S-6  S-7  S-8  S-9  S-0  S-[  S-]
        _    _    _    _    _         _    _    _    _    _    _
  _     _                   _                 
        _    _                                  _                   _
)

(deflayer multra
                                 _
  @grl  _    _    _    _    _         _    _    _    _    _    _    _
  _     _    _    _    _    _    _    _    _    _    _    _    _    _
  _     _    _    _    _    _    _    _    _    _    _    _    _    _
        _    _    _    _    _         _    _    _    _    _    _
  _     _                   _                 
        _    _                                  _                   _
)

(deflayer spaced
                                 _
  @grl  _    _    _    _    _         _    _    _    _    _    _    _
  _     _    _    _    _    _    _    _    _    _    _    _    _    _
  _     lmet lalt lctl lsft _    _    _    left up   down rght _    _
        _    _    _    _    _         _    _    _    _    _    _
  _     _                   _                 
        _    _                                  _                   _
)

(defvar
  tap-time  1
  hold-time 150
)

(defalias
    met_a (tap-hold $tap-time $hold-time a lmet)
    alt_o (tap-hold $tap-time $hold-time o lalt)
    ctl_e (tap-hold $tap-time $hold-time e lctl)
    sft_u (tap-hold-release $tap-time $hold-time u lsft)

    i (tap-hold $tap-time $hold-time i sldr)
    d (tap-hold $tap-time $hold-time d sldr)

    sft_h (tap-hold-release $tap-time $hold-time h rsft)
    ctl_t (tap-hold $tap-time $hold-time t rctl)
    alt_n (tap-hold $tap-time $hold-time n lalt)
    met_s (tap-hold $tap-time $hold-time s rmet)
)

(defseq ST (s t))
(deffakekeys ST (macro S-s y l v a i n spc S-t e d o l d i))

(defseq Sylvain (s s))
(deffakekeys Sylvain (macro S-s y l v a i n))


;; defalias is used to declare a shortcut for a more complicated action to keep
;; the deflayer declarations clean and aligned. The alignment in deflayers is not
;; necessary, but is strongly recommended for ease of understanding visually.
;;
;; Aliases are referred to by `@<alias_name>`.
(defalias
  ;; tap: backtick (grave), hold: toggle layer-switching layer while held
  grl (tap-hold $tap-time $hold-time grv (layer-toggle layers))

  ;; layer-switch changes the base layer.
  dvk (layer-switch dvorak)
  qwr (layer-switch qwerty)

  ;; long press keep all the way up / down
  pgup (tap-hold $tap-time $hold-time pgup home)
  pgdn (tap-hold $tap-time $hold-time pgdn end)

  ;; lower - higher layers
  lsft (tap-hold $tap-time $hold-time esc (layer-toggle higher))
  rsft (layer-toggle accent)
  e    (tap-hold $tap-time $hold-time e (layer-toggle lower))
  lalt (layer-toggle lower)
  ralt (layer-toggle higher)

  spc (tap-hold $tap-time $hold-time spc (layer-toggle spaced))
  ultra (layer-toggle ultra) 
  multra (layer-toggle multra) 

  meh (multi lctl alt lsft lmet)

  r (tap-hold $tap-time $hold-time r (layer-toggle accent))
)

(deflayermap accent
  q (macro RA-grv a)
  w (macro RA-, c)
  e (macro RA-o e)
  r (macro RA-S-6 o)

  a (macro RA-grv a)
  s (macro RA-e ')
  d (macro RA-grv e)
  f (macro RA-S-6 e)

  h @lpar
  j @rpar
  k (macro RA-S-6 i)
  l (macro RA-S-' i)
  ; (macro RA-u grv)

  z (macro RA-a e)
  n (macro RA-. .)

  u (macro RA-m u)
  i @_
  p (macro RA-S-6 u)
  
  spc '

)

;; The `lrld` action stands for "live reload". This will re-parse everything
;; except for defcfg. I.e. in Linux, you cannot live reload and switch keyboard
;; devices for the time being.
;;
;; The keys 1 and 2 switch the base layer to qwerty and dvorak respectively.
;;
;; Apart from the layer switching and live reload, all other keys are the
;; underscore _ which means "transparent". Transparent means the base layer
;; behaviour is used when pressing that key.
(deflayer layers
                                 _
  _     lrld @qwr @dvk _    _         _    _    _    _    _    _    _ 
  _     _    _    _    _    _    _    _    _    _    _    _    _    _
  _     _    _    _    _    _    _    _    _    _    _    _    _    _
        _    _    _    _    _         _    _    _    _    _    _
  _     _                   _                 
        _    _                                  _                   _
)
